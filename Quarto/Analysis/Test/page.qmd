---
title: Test
date: May 13, 2025
author: Frederik M. Dam
format:
  html:
    css: style.css
    grid:
      sidebar-width: 200px
    toc: false
---

```{=html}
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

<div class="container">
  <div class="plot-container">
    <label for="colorBy1">Color plot 1 by:</label>
    <select id="colorBy1"></select>
    <div id="plot1"></div>
  </div>
  
  <div class="plot-container">
    <label for="colorBy2">Color plot 2 by:</label>
    <select id="colorBy2"></select>
    <div id="plot2"></div>
  </div>
</div>

<script src="data.js"></script>
<script>
  async function drawPlot(plotId, dropdownId, colorBy = "IsBetaEasy") {
      let data = jsonData;
      let keys = Object.keys(data[0]).filter(key => typeof data[0][key] === "number");
      let dropdown = document.getElementById(dropdownId);
      let blacklist = ["z_1", "z_2"];

      if (dropdown.options.length === 0) {
          keys.filter(key => !blacklist.includes(key) && !key.endsWith("raw"))
              .forEach(key => {
                  let option = document.createElement("option");
                  option.value = key;
                  option.textContent = key;
                  dropdown.appendChild(option);
              });
      }

      let x = data.map(d => d.z_1);
      let y = data.map(d => d.z_2);
      let color = data.map(d => d[colorBy]);

      const reverseFeatures = [];
      const reverseList = reverseFeatures.concat(keys.filter(key => key.endsWith("_perf")));

      let trace = {
          x: x,
          y: y,
          mode: "markers",
          marker: { 
            size: 8, 
            color: color, 
            colorscale: "Bluered", 
            showscale: true, 
            reversescale: reverseList.includes(colorBy)
          },
          text: data.map(d => `Instance: ${d.instance_name}<br>${colorBy}: ${d[colorBy]}`)
      };

      let layout = {
          title: "Instance Space Analysis",
          width: 600,
          height: 600,
          hovermode: 'closest'
      };

      Plotly.newPlot(plotId, [trace], layout, {
          modeBarButtonsToRemove: ['zoom2d', 'pan2d', 'select2d', 'lasso2d'],
          displaylogo: false
      });
  }

  // Initial draw of both plots
  drawPlot("plot1", "colorBy1");
  drawPlot("plot2", "colorBy2");

  // Redraw when dropdown values change
  document.getElementById("colorBy1").addEventListener("change", function() {
      drawPlot("plot1", "colorBy1", this.value);
  });
  document.getElementById("colorBy2").addEventListener("change", function() {
      drawPlot("plot2", "colorBy2", this.value);
  });
</script>
```

## Features explained: 

**IsBetaEasy:** Indicates whether an instance is denoted as easy based on the used Beta Threshold (default = 0.55) 
                which denotes a percentage of instances that must have performance better than the performance threshold (0.0125 for the example), for an instance to be denoted as easy. \
**NumGoodAlgos:** The number of algorithms, used in the analysis, that attains good performance on the given instance.\
**num_vertices:** The number of vertices that the instance contains.\
**num_edges:** The number of edges that the instance contains.\
**largest_dist:** The largest distance found among the shortest path between any two vertices of the graph. \
**ratio_of_edges:** The ratio between the number of edges in a graph, and the maximum number of possible edges.\
**average_dist:** This denotes the distance between any pair of vertices using their shortest path. \
**mean_degree:** The mean value of the number of connections a vertice has to other vertices in the graph.\
**std_deviation_degree:** The standard deviation of the vertex degree.\
**clustering_coef:** The ratio of closed triplets to the number total number of triplets in a graph. calculated as Trip~closed~ / Trip~Total~.\
**energy:** The mean value of all eigenvalues of the adjacency matrix.\
**std_devi_eig_adj:** The standard deviation of the set of eigenvalues of the adjacency matrix.\
**connectivity:** The Algebraic connectivity, which is denoted as the second smallest eigenvalue of the Laplacian matrix.\
**small_nonzero_eig_lap:**The smallest nonzero eigenvalue of the Laplacian matrix.\
**sec_small_nonzero_eig_lap:** The second smallest nonzero eigenvalue of the Laplacian matrix.\
**large_eig_lap:** The largest eigenvalue of the Laplacian matrix.\
**sec_large_eig_lap:** The second largest eigenvalue of the Laplacian matrix.\
**small_eig_adj:**The smallest eigenvalue of the adjacency matrix.\
**sec_small_eig_adj:** The second smallest eigenvalue of the adjacency matrix.\
**large_eig_adj:** The largest eigenvalue of the adjacency matrix.\
**sec_large_eig_adj:** The second largest eigenvalue of the adjacency matrix.\
**gap_eig_adj:**The gap between the largest and second largest eigenvalue of the adjacency matrix.\
**gap_eig_lap:**The gap between the largest and second largest eigenvalue of the Laplacian matrix.\
**\_perf:** The performance metric for an algorithm on the instance, calculated as (Alg~perf~ - Best~perf~) / Best~perf~.\
**\_bin:** The binary coloring, based on whether or not an algorithms performance metric is below the performance threshold or not.\
**best:** The best is an "algorithm" only in name for the sake of the ISA, as the performance metric fro the analysis, is based on comparing to the best known solution, here best denotes those best known solutions.
