---
title: "Getting Started"
---
To see an example output from an execution of an Instance Space Analysis you can follow this link: [Example](./Analysis/Example/Example.qmd).

## Initial information regarding the algorithms used
All Algorithms have currently been run for a maximum of 10 minutes. Therefore for a fair comparison with new algorithms they are expected to have had a similar limit on their allowed running time.
For the homer.col instance there is a current issue and as such this instance should be skipped.

## Posting your own algorithms
To allow for analysis using user algorithms, the page allows for users to add algorithms to the test suite that can be used.
This process is done by,

1. Running your algorithm using the instances present in the [gvc-instances](https://github.com/GraphVertexColoring/gvc-instances) repository.

2. Gather the achieved results in .sol.gz format, located within a subdirectory which should be named after the algorithm used, using an identifying suffix. 

3. Push this folder to the [data-archive](https://github.com/GraphVertexColoring/data-archive) under the /Algos/ within the corresponding run folder. For multiple runs post each individual runs .sol.gz files into the seperate run folders, using dublicate folder names.

This triggers a workflow that verifies the solutions using the [coloring-verifier](https://github.com/GraphVertexColoring/coloring-verifier), any nonvalid solutions are removed automatically.
The number of colors used for each instance is then extracted from all remaining solutions, and this is added to the algoPerf.csv and algoPerfMult.csv files within the [coloring](https://github.com/GraphVertexColoring/coloring) repository. 
In the case that any solutions show better performance that what is currently denoted for the instance in the [best](https://graphvertexcoloring.github.io/coloring/best.html) list, that value is noted and the list is updated.

## Running your own Instance Space Analysis
To perform an Instance Space Analysis (ISA),

1. Modify the config.yaml file found in the [coloring](https://github.com/GraphVertexColoring/coloring) repository, adjusting the list of algorithms to match the algorithms that one wants to use (The names should match the directory names that contain solution files corresponding to the algorithm as they are named in the [data-archive](https://github.com/GraphVertexColoring/data-archive)).
Ensure that the dir parameter does not overlap with an already existing docs subdirectory, and that the parameters are as desired in regards to the ISA.

2. Push this modified config.yaml file onto the [coloring](https://github.com/GraphVertexColoring/coloring) repository.

3. This triggers an ISA, using the parameters from the config , this may take some time.

4. Locate the analysis within the [Analysis Listing](analysis.qmd) page.

5. Inspect and analyze the plots using the two plots for easier comparisons.

## Adding additional Instances to better fill out the instance space.
To add more instance to the repository, simply push additional instance into the [gvc-instance](https://github.com/GraphVertexColoring/gvc-instances) repoistory.
Ensure that the instances are posted in .col.gz format, and follows the standard DIMACS conventions.

